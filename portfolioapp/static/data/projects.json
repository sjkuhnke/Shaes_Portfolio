[
  {
    "id": 1,
    "title": "JMW Transfer Website",
    "description": "A custom full-stack business website built entirely from the ground up for JMW Transfer Inc. This project involved complete ownership of the design, development, testing, deployment, and ongoing maintenance of the site. The website features an interactive, client-friendly interface with key pages such as a dynamic homepage with image slideshows and service details, a robust job application system with auto-filled PDFs and real-time validation, a reCAPTCHA-protected contact form, and an about page showcasing company values and offerings.\n\nThe job application system was engineered to be fully digital and mobile-responsive, guiding applicants through logically grouped sections, including conditional fields, validation feedback, e-signature input, and calendar widgets. Upon submission, the application data is emailed to HR and used to automatically generate a pre-filled PDF version of the company's paper application. The site also integrates social media (Facebook embeds), uses JavaScript to enhance UX, and serves as a professional online presence for the company with SEO-optimized content.\n\nOngoing maintenance includes feature expansion, bug fixes, and server-level deployment management.",
    "technologies": [
      { "label": "Backend", "value": "`Django 5`, `SQLite`, `boto3` (AWS integration)" },
      { "label": "Frontend", "value": "`HTML5`, `CSS3`, `Vanilla JavaScript`" },
      { "label": "Other Tools", "value": "reCAPTCHA integration, PDF generation (`ReportLab`, `PyPDF2`), File/email handling via `Amazon SES` and `AWS S3`, `Pillow` for image processing, responsive design, `.env` for configuration" }
    ],
    "github_link": "https://github.com/sjkuhnke/JMW-Transfer-Inc-Website",
    "live_link": "https://www.jmwtransfer.com",
    "caption": "Home page showing navigation menu, map and company info",
    "videos": [],
    "images": [
      {"filename": "home.png", "caption": "Image slideshow and trailer types on home page"},
      {"filename": "slideshow.gif", "caption": "Slideshow in motion (GIF) and interactive trailers"},
      {"filename": "job.png", "caption": "Job page showing the company's Facebook embed"},
      {"filename": "download.png", "caption": "Applicants can download a PDF of the application if they prefer that"},
      {"filename": "application.png", "caption": "Online job application - seperated into sections for organization"},
      {"filename": "validate_bad.gif", "caption": "Automatic validation - in this case, showing the section is invalid"},
      {"filename": "validate_good.gif", "caption": "Automatic validation - in this case, showing the section is complete!"},
      {"filename": "address.gif", "caption": "Showing interactive UI elements with sections powered by JavaScript"},
      {"filename": "interactive.gif", "caption": "Conditional fields that are only applicable under certain conditions"},
      {"filename": "signature.gif", "caption": "Custom font for e-signature and showing calendar widget"},
      {"filename": "submit2.png", "caption": "The email HR receives when someone fills out an application with the application and log attached"},
      {"filename": "filled_application.gif", "caption": "Paper application automatically filled with the applicant's info after submitting online form"},
      {"filename": "application_log.gif", "caption": ".txt log attached as well for easier data parsing"},
      {"filename": "contact.png", "caption": "Contact page with reCAPTCHA integrated"},
      {"filename": "about.png", "caption": "Information about the company on their about page"},
      {"filename": "trailer.gif", "caption": "Trailer information for rent and slideshows showcasing different images"},
      {"filename": "service.gif", "caption": "Services that the company provides with images"}
    ],
    "folder": "jmw",
    "category": "Django",
    "date": "Summer 2024",
    "testimonial_id": "jmw"
  },
  {
    "id": 2,
    "title": "RK Videos Co. Website",
    "description": "A custom business website developed for RK Videos Co., a professional video production company. This Django-based site serves as the company’s digital portfolio and primary contact point for clients. The site includes a modern, responsive homepage with quotes from satisfied clients, an about page detailing the owner's background, and a sleek video showcase featuring embedded Vimeo reels and a custom trailer for the owner's personal documentary.\n\nThe site also includes a secure, user-friendly contact form with integrated Google reCAPTCHA to prevent spam. Submitted messages are validated client-side and server-side, and successful submissions generate professional email notifications delivered via Amazon SES. All pages are optimized for performance and clean navigation, allowing both new and returning visitors to easily learn about the company’s services and reach out directly.\n\nThis project included full-stack development, deployment to a Heroku production server with Gunicorn and Whitenoise, and email infrastructure setup. The result is a minimalist, client-focused website that highlights RK Videos Co.’s work while maintaining professional branding and backend reliability.",
    "technologies": [
      { "label": "Backend", "value": "`Django 5`, `SQLite`, `Amazon SES` for email" },
      { "label": "Frontend", "value": "`HTML5`, `CSS3`, `Vanilla JavaScript`, Responsive design" },
      { "label": "Other Tools", "value": "reCAPTCHA integration, `Vimeo` video embedding, `Gunicorn` + `Whitenoise` for Heroku deployment, `.env` for configuration" }
    ],
    "github_link": "https://github.com/sjkuhnke/rkvWebsite",
    "live_link": "https://www.rkvideos-co.com",
    "caption": "Home page showing logo, info and quotes from their clients",
    "videos": [],
    "images": [
      {"filename": "contact.png", "caption": "Contact page with reCAPTCHA integrated"},
      {"filename": "contact_submit.gif", "caption": "Submitting the contact page and validation text shown"},
      {"filename": "email.png", "caption": "Email that gets sent to company owner from a Amazon SES noreply email"},
      {"filename": "documentary.gif", "caption": "Owner's documentary they created showcased on its own page with trailer"},
      {"filename": "reel.gif", "caption": "Vimeo embeds of the owner's work - updated with new reels frequently!"},
      {"filename": "about.png", "caption": "About page for the owner and their information"}
    ],
    "folder": "rk",
    "category": "Django",
    "date": "Summer 2024",
    "testimonial_id": "rk"
  },
  {
    "id": 3,
    "title": "UWM Boss App",
    "description": "A full-stack mobile transportation app developed as part of the University of Wisconsin-Milwaukee's Senior Capstone program. BOSS (Be On the Safe Side) is UWM’s late-night ride service for students, and this redesign aimed to enhance the existing experience with new, highly-requested features. Our 6-person team (assigned randomly) rebuilt the app from the ground up using React Native and Django REST, implementing real-time updates, queue visibility, in-app issue reporting, and secure communication between riders, drivers, and supervisors.\n\nThe app includes distinct user roles—Riders, Drivers, and Supervisors—each with tailored dashboards and features. Riders can request rides, track status, and message drivers; Drivers can view their assigned rides, communicate with riders, and end rides securely with unique codes; Supervisors can manage all users and vehicles, generate ride reports, and monitor ride activity in real time.\n\nThe project was thoroughly documented with a public GitHub repo and a multi-part showcase video covering the full system, from logging in and managing users, to creating vans and processing rides. Although the app is no longer hosted live, it can be cloned and run locally via Expo for the frontend and Django for the backend.",
    "technologies": [
      { "label": "Frontend", "value": "`React Native`, `Expo`, `AsyncStorage`" },
      { "label": "Backend", "value": "`Django`, `Django REST Framework`" },
      { "label": "Database", "value": "`SQLite` (dev), `PostgreSQL` (production)" },
      { "label": "Other Tools", "value": "Trello Project Board, mobile device emulation, secure login, role-based permissions, report generation" }
    ],
    "github_link": "https://github.com/AlsheikhMohammmad/UWM-BOSS",
    "live_link": null,
    "caption": "Different mobile screens of the app",
    "videos": [
      { "filename": "intro.mp4", "caption": "About the project" },
      { "filename": "showcase.mp4", "caption": "Showcasing all functionality" },
      { "filename": "github.mp4", "caption": "About the source code and technologies used" },
      { "filename": "outro.mp4", "caption": "Conclusion" }
    ],
    "images": [
      { "filename": "create_rider.gif", "caption": "Creating a new (rider) account from the home page, showing it being added in the database" },
      { "filename": "rider_dashboard.gif", "caption": "Logging into the new rider account and seeing the Rider's dashboard" },
      { "filename": "edit_account.gif", "caption": "Editing the new account from their dashboard - the current password needs to be entered to save changes" },
      { "filename": "supervisor.gif", "caption": "Creating a supervisor (only admins can do this), seeing their dashboard and editing our rider user" },
      { "filename": "supervisor_edit.gif", "caption": "Supervisor settings page where they can edit their account and see the TOS " },
      { "filename": "supervisor_create.gif", "caption": "Creating a Driver user as a Supervisor" },
      { "filename": "van.gif", "caption": "Creating a van where we can specify the van number and ADA compliance" },
      { "filename": "create_ride.gif", "caption": "Now as a rider we can request a ride and the system will assign a driver and van!" },
      { "filename": "end_ride.gif", "caption": "Now, as the assigned driver we can end the ride when its completed using the secure code the rider has" },
      { "filename": "create_report.gif", "caption": "Both riders and drivers can file a report on any completed rides if something goes wrong" },
      { "filename": "view_report.gif", "caption": "Supervisors can view all reports and take action accordingly!" }
    ],
    "folder": "uwm-boss",
    "category": "React",
    "date": "Spring 2024 & Fall 2024 Semesters",
    "testimonial_id": "capstone"
  },
  {
    "id": 4,
    "title": "Java RPG Game",
    "description": "A solo-developed turn-based RPG built in Java, featuring custom engines for movement, UI, physics, and combat. Over 50 active users since launch.",
    "technologies": [],
    "github_link": "https://github.com/sjkuhnke/Java-RPG",
    "live_link": null,
    "caption": "",
    "videos": [],
    "images": [
    ],
    "folder": "rpg",
    "category": "Java",
    "date": "2023-10-01"
  },
  {
    "id": 5,
    "title": "Poker AI Trainer",
    "description": "Java-based poker trainer that helps players analyze decision making through simulations.",
    "technologies": [],
    "github_link": "https://github.com/sjkuhnke/Hackathon",
    "live_link": null,
    "caption": "",
    "videos": [],
    "images": [
      {"filename": "screen1.png", "caption": "Mobile view of student management"}
    ],
    "folder": "poker",
    "category": "Java",
    "date": "2023-11-15"
  },
  {
    "id": 6,
    "title": "TA Scheduler App",
    "description": "A Django web application for managing and scheduling teaching assistants, developed as part of a collaborative scrum team in an online learning course.",
    "technologies": [],
    "github_link": "https://github.com/sjkuhnke/TA-Scheduler",
    "live_link": null,
    "caption": "",
    "videos": [],
    "images": [
    ],
    "folder": "scheduler",
    "category": "Django",
    "date": "2023-09-01"
  },
  {
    "id": 7,
    "title": "Binary Search Tree Program",
    "description": "A fully custom Java-based implementation of a Binary Search Tree that fulfills the Java `Set` interface while also providing a live UI and BST visualizer. This project was designed to support a [larger game project](/portfolio/4/), where maintaining and organizing large collections of enum values required an efficient and structured backend solution. The BSTSet program ensures all string-based elements remain sorted, unique, and accessible in logarithmic time.\n\nThe visual interface allows users to insert, remove, and check elements with real-time feedback, offering an educational view into how binary trees operate. It supports in-order traversal for sorted output, full recursive logic for `add`, `remove`, `contains`, and `size`, and shows the structural changes dynamically through animated tree drawing. The UI also supports automatic save/load functionality via `.dat` file serialization, making it possible to resume previous sessions instantly.\n\nKey features include:\n- Full compliance with the Java `Set` interface\n- Recursive methods for all tree operations, preserving balance and uniqueness\n- Real-time visualizer that animates tree growth, removal, and traversal\n- A graphical user interface for input/output\n- Object serialization using Java’s I/O libraries to persist the tree state between runs\n\nThis tool was invaluable for backend enum organization in a custom RPG game and serves as both a practical utility and a learning resource for data structures and recursion.",
    "technologies": [
      { "label": "Java Core Libraries", "value": "Implements `Set` and `Serializable` interfaces to manage collections and persist data." },
      { "label": "Binary Search Tree (BST)", "value": "Supports recursive `add()`, `remove()`, `contains()`, `size()`, and in-order traversal to maintain order and uniqueness." },
      { "label": "Java Swing GUI", "value": "Built with `JFrame`, `JPanel`, `JButton`, `JTextField`, and `JOptionPane` for real-time interaction and visualization." },
      { "label": "Event-Driven Programming", "value": "Uses `ActionListener` for user input and `WindowAdapter` to save data on exit." },
      { "label": "File I/O & Serialization", "value": "Saves and loads tree state with `ObjectOutputStream` and `ObjectInputStream`." },
      { "label": "String Handling", "value": "Case-insensitive logic with utility-based proper casing for display." }
    ],
    "github_link": "https://github.com/sjkuhnke/BSTSetProgram.git",
    "live_link": null,
    "caption": "UML diagram of the program, the GUI in action, and a visual representation of the binary search tree",
    "videos": [],
    "images": [
      {"filename": "gui.gif", "caption": "Letters of the alphabet added in random order, printed in sorted order, and removed"},
      {"filename": "uml.png", "caption": "Full UML class diagram, implementing Java's Set interface"},
      {"filename": "node.png", "caption": "Each Node stores a String and has left/right child references"},
      {"filename": "in_order.png", "caption": "Methods that perform an in-order traversal of the tree to output a sorted list"},
      {"filename": "in_order.gif", "caption": "Letters added in random order, in-order traversal animation of what the recursion is doing"},
      {"filename": "size.png", "caption": "Size methods use recursion to calculate how many elements in the tree"},
      {"filename": "contains.png", "caption": "contains(): used to not allow duplicates (definition of a Set)"},
      {"filename": "contains.gif", "caption": "How the recursive algorithm works for contains()"},
      {"filename": "add.png", "caption": "Recursive insertion logic for adding an element"},
      {"filename": "add.gif", "caption": "Visual animation of letters being added in random order - tree grows dynamically"},
      {"filename": "remove.png", "caption": "remove() covers all 3 removal cases: leaf, node with 1 child, and node with 2 children (predecessor replacement)"},
      {"filename": "remove.gif", "caption": "Showing live deletion of the aforementioned 3 different removal cases - including replacing the root"},
      {"filename": "io.gif", "caption": "Shows automatic saving and loading of the BST object when closing/opening the program"}
    ],
    "folder": "bst",
    "category": "Java",
    "date": "June 2023"
  }
]