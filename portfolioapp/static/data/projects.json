[
  {
    "id": 1,
    "title": "JMW Transfer Website",
    "description": "A custom full-stack business website built entirely from the ground up for JMW Transfer Inc. This project involved complete ownership of the design, development, testing, deployment, and ongoing maintenance of the site. The website features an interactive, client-friendly interface with key pages such as a dynamic homepage with image slideshows and service details, a robust job application system with auto-filled PDFs and real-time validation, a reCAPTCHA-protected contact form, and an about page showcasing company values and offerings.\n\nThe job application system was engineered to be fully digital and mobile-responsive, guiding applicants through logically grouped sections, including conditional fields, validation feedback, e-signature input, and calendar widgets. Upon submission, the application data is emailed to HR and used to automatically generate a pre-filled PDF version of the company's paper application. The site also integrates social media (Facebook embeds), uses JavaScript to enhance UX, and serves as a professional online presence for the company with SEO-optimized content.\n\nOngoing maintenance includes feature expansion, bug fixes, and server-level deployment management.",
    "technologies": [
      { "label": "Backend", "value": "`Django 5`, `SQLite`, `boto3` (AWS integration)" },
      { "label": "Frontend", "value": "`HTML5`, `CSS3`, `Vanilla JavaScript`" },
      { "label": "Other Tools", "value": "reCAPTCHA integration, PDF generation (`ReportLab`, `PyPDF2`), File/email handling via `Amazon SES` and `AWS S3`, `Pillow` for image processing, responsive design, `.env` for configuration" }
    ],
    "github_link": "https://github.com/sjkuhnke/JMW-Transfer-Inc-Website",
    "live_link": "https://www.jmwtransfer.com",
    "caption": "Home page showing navigation menu, map and company info",
    "videos": [],
    "images": [
      {"filename": "home.png", "caption": "Image slideshow and trailer types on home page"},
      {"filename": "slideshow.gif", "caption": "Slideshow in motion (GIF) and interactive trailers"},
      {"filename": "job.png", "caption": "Job page showing the company's Facebook embed"},
      {"filename": "download.png", "caption": "Applicants can download a PDF of the application if they prefer that"},
      {"filename": "application.png", "caption": "Online job application - seperated into sections for organization"},
      {"filename": "validate_bad.gif", "caption": "Automatic validation - in this case, showing the section is invalid"},
      {"filename": "validate_good.gif", "caption": "Automatic validation - in this case, showing the section is complete!"},
      {"filename": "address.gif", "caption": "Showing interactive UI elements with sections powered by JavaScript"},
      {"filename": "interactive.gif", "caption": "Conditional fields that are only applicable under certain conditions"},
      {"filename": "storage.gif", "caption": "Refreshing/revisiting the page saves your progress automatically using local storage, including conditional fields!"},
      {"filename": "formatted.gif", "caption": "Phone numbers and SSN automatically formatted (as well as currency) using JavaScript"},
      {"filename": "signature.gif", "caption": "Custom font for e-signature and showing calendar widget"},
      {"filename": "submit2.png", "caption": "The email HR receives when someone fills out an application with the application and log attached"},
      {"filename": "filled_application.gif", "caption": "Paper application automatically filled with the applicant's info after submitting online form"},
      {"filename": "application_log.gif", "caption": ".txt log attached as well for easier data parsing"},
      {"filename": "contact.png", "caption": "Contact page with reCAPTCHA integrated"},
      {"filename": "about.png", "caption": "Information about the company on their about page"},
      {"filename": "trailer.gif", "caption": "Trailer information for rent and slideshows showcasing different images"},
      {"filename": "service.gif", "caption": "Services that the company provides with images"}
    ],
    "folder": "jmw",
    "category": "Django",
    "date": "Summer 2024",
    "testimonial_id": "jmw"
  },
  {
    "id": 2,
    "title": "RK Videos Co. Website",
    "description": "A custom business website developed for RK Videos Co., a professional video production company. This Django-based site serves as the company’s digital portfolio and primary contact point for clients. The site includes a modern, responsive homepage with quotes from satisfied clients, an about page detailing the owner's background, and a sleek video showcase featuring embedded Vimeo reels and a custom trailer for the owner's personal documentary.\n\nThe site also includes a secure, user-friendly contact form with integrated Google reCAPTCHA to prevent spam. Submitted messages are validated client-side and server-side, and successful submissions generate professional email notifications delivered via Amazon SES. All pages are optimized for performance and clean navigation, allowing both new and returning visitors to easily learn about the company’s services and reach out directly.\n\nThis project included full-stack development, deployment to a Heroku production server with Gunicorn and Whitenoise, and email infrastructure setup. The result is a minimalist, client-focused website that highlights RK Videos Co.’s work while maintaining professional branding and backend reliability.",
    "technologies": [
      { "label": "Backend", "value": "`Django 5`, `SQLite`, `Amazon SES` for email" },
      { "label": "Frontend", "value": "`HTML5`, `CSS3`, `Vanilla JavaScript`, Responsive design" },
      { "label": "Other Tools", "value": "reCAPTCHA integration, `Vimeo` video embedding, `Gunicorn` + `Whitenoise` for Heroku deployment, `.env` for configuration" }
    ],
    "github_link": "https://github.com/sjkuhnke/rkvWebsite",
    "live_link": "https://www.rkvideos-co.com",
    "caption": "Home page showing logo, info and quotes from their clients",
    "videos": [],
    "images": [
      {"filename": "contact.png", "caption": "Contact page with reCAPTCHA integrated"},
      {"filename": "contact_submit.gif", "caption": "Submitting the contact page and validation text shown"},
      {"filename": "email.png", "caption": "Email that gets sent to company owner from a Amazon SES noreply email"},
      {"filename": "documentary.gif", "caption": "Owner's documentary they created showcased on its own page with trailer"},
      {"filename": "reel.gif", "caption": "Vimeo embeds of the owner's work - updated with new reels frequently!"},
      {"filename": "about.png", "caption": "About page for the owner and their information"}
    ],
    "folder": "rk",
    "category": "Django",
    "date": "Summer 2024",
    "testimonial_id": "rk"
  },
  {
    "id": 3,
    "title": "UWM Boss App",
    "description": "A full-stack mobile transportation app developed as part of the University of Wisconsin-Milwaukee's Senior Capstone program. BOSS (Be On the Safe Side) is UWM’s late-night ride service for students, and this redesign aimed to enhance the existing experience with new, highly-requested features. Our 6-person team (assigned randomly) rebuilt the app from the ground up using React Native and Django REST, implementing real-time updates, queue visibility, in-app issue reporting, and secure communication between riders, drivers, and supervisors.\n\nThe app includes distinct user roles—Riders, Drivers, and Supervisors—each with tailored dashboards and features. Riders can request rides, track status, and message drivers; Drivers can view their assigned rides, communicate with riders, and end rides securely with unique codes; Supervisors can manage all users and vehicles, generate ride reports, and monitor ride activity in real time.\n\nThe project was thoroughly documented with a public GitHub repo and a multi-part showcase video covering the full system, from logging in and managing users, to creating vans and processing rides. Although the app is no longer hosted live, it can be cloned and run locally via Expo for the frontend and Django for the backend.",
    "technologies": [
      { "label": "Frontend", "value": "`React Native`, `Expo`, `AsyncStorage`" },
      { "label": "Backend", "value": "`Django`, `Django REST Framework`" },
      { "label": "Database", "value": "`SQLite` (dev), `PostgreSQL` (production)" },
      { "label": "Other Tools", "value": "Trello Project Board, mobile device emulation, secure login, role-based permissions, report generation" }
    ],
    "github_link": "https://github.com/AlsheikhMohammmad/UWM-BOSS",
    "live_link": null,
    "caption": "Different mobile screens of the app",
    "videos": [
      { "filename": "intro.mp4", "caption": "About the project", "youtube": false },
      { "filename": "https://www.youtube.com/embed/VTpXelyjKV8?si=ZZfC_FlW6-S0jynt", "caption": "Showcasing all functionality", "youtube": true },
      { "filename": "github.mp4", "caption": "About the source code and technologies used", "youtube": false },
      { "filename": "outro.mp4", "caption": "Conclusion", "youtube": false }
    ],
    "images": [
      { "filename": "create_rider.gif", "caption": "Creating a new (rider) account from the home page, showing it being added in the database" },
      { "filename": "rider_dashboard.gif", "caption": "Logging into the new rider account and seeing the Rider's dashboard" },
      { "filename": "edit_account.gif", "caption": "Editing the new account from their dashboard - the current password needs to be entered to save changes" },
      { "filename": "supervisor.gif", "caption": "Creating a supervisor (only admins can do this), seeing their dashboard and editing our rider user" },
      { "filename": "supervisor_edit.gif", "caption": "Supervisor settings page where they can edit their account and see the TOS " },
      { "filename": "supervisor_create.gif", "caption": "Creating a Driver user as a Supervisor" },
      { "filename": "van.gif", "caption": "Creating a van where we can specify the van number and ADA compliance" },
      { "filename": "create_ride.gif", "caption": "Now as a rider we can request a ride and the system will assign a driver and van!" },
      { "filename": "end_ride.gif", "caption": "Now, as the assigned driver we can end the ride when its completed using the secure code the rider has" },
      { "filename": "create_report.gif", "caption": "Both riders and drivers can file a report on any completed rides if something goes wrong" },
      { "filename": "view_report.gif", "caption": "Supervisors can view all reports and take action accordingly!" }
    ],
    "folder": "uwm-boss",
    "category": "React",
    "date": "Spring 2024 & Fall 2024 Semesters",
    "testimonial_id": "capstone"
  },
  {
    "id": 4,
    "title": "Java RPG Game",
    "description": "A fully custom turn-based RPG built entirely in Java from the ground up, inspired by a childhood dream to bring a hand-drawn Pokémon-style game to life. This project has evolved into a massive, self-contained engine supporting exploration, dynamic NPCs, stat-based combat, evolving creatures, and a branching storyline—entirely programmed by a solo developer over two years of continuous development.\n\nUnlike ROM hacks that modify existing Pokémon games, this project features a **completely original engine** with its own rendering system, UI framework, battle logic, and save/load system. All core mechanics—from wild encounters and trainer AI to item bags, Pokédex systems, and map warping—are built from scratch. Maps, routes, towns, and story elements are adapted from over **two notebooks** of world-building created as a kid.\n\nKey gameplay systems include:\n\n- Wild encounters, trainer battles, stat growth, evolutions, type matchups\n\n- Save/load using `.dat` files, persistent game state, and progression flags\n\n- Inventory UI with multi-tab bag sorting, item movement, and item use logic\n\n- PC system for party management and a Pokédex that tracks seen/caught creatures\n\n- Tools like a DexNav for area-based capture progress, and an in-game **damage calculator** for competitive strategy\n\n- Cutscenes, branching dialogue trees, and scripted story events\n\nOver **50 players** have joined the growing community, and regular updates are shared through a dedicated [Discord server](https://discord.gg/S6hKJAqYmf). Sprites and story content are contributed by commissioned artists and writers, while the game's full logic remains entirely Java-coded. The game runs natively and requires only Java to play, with **7 out of 8 gyms complete** as of now and more content being added daily.",
    "technologies": [
      { "label": "Core Language", "value": "`Java 8` (pure Java with no external frameworks)" },
      { "label": "Game Engine Design", "value": "Custom engine supporting tile-based movement, collision detection, UI rendering, and turn-based combat" },
      { "label": "Data Management", "value": "Uses `.dat` files with `ObjectInputStream` and `ObjectOutputStream` for full object serialization of game state, including party, items, flags, maps, and trainer data" },
      { "label": "UI/UX", "value": "Built with `JPanel` and custom-drawn `Graphics2D` interfaces for battles, inventory, Pokédex, shops, and more" },
      { "label": "AI & Battle Logic", "value": "Trainer AI for move selection, decision making and switching in/out, type effectiveness, stat handling, and evolution conditions" },
      { "label": "Scripting & World Events", "value": "Flag-driven progression for cutscenes, dialogue trees, warp logic, and story progression control" },
      { "label": "Community & Distribution", "value": "Playable `.jar` files distributed via a Discord server, with active playtesting and feedback loop" }
    ],
    "github_link": "https://github.com/sjkuhnke/PokemonGame",
    "live_link": "https://www.shaekuhnke.com/xhenos",
    "caption": "Different screenshots from the game, showing the battle screen, overworld, different custom UIs (with custom art!)",
    "videos": [
      { "filename": "wild_battle.mp4", "caption": "Running in grass sometimes will lead to a wild encounter", "youtube": false },
      { "filename": "warp.mp4", "caption": "Walking on warp tiles will transition you to other maps", "youtube": false },
      { "filename": "catching.mp4", "caption": "Catching a wild encounter!", "youtube": false },
      { "filename": "trainer.mp4", "caption": "NPC trainers will spot you for a battle - with custom AI making their move decisions!", "youtube": false },
      { "filename": "scott1.mp4", "caption": "Introducing other characters - a neighbor boy who will be your rival trainer", "youtube": false },
      { "filename": "robin1.mp4", "caption": "Going to the next town seeing the gym leader (who is a postal carrier) and asking for your help", "youtube": false },
      { "filename": "robin2.mp4", "caption": "After delivering the packages, him telling you there's one more to deliver (showing dynamic conversations based on the game state)", "youtube": false },
      { "filename": "warehouse.mp4", "caption": "Beating the thug who was guarding the warehouse and him giving you a key", "youtube": false },
      { "filename": "evo.mp4", "caption": "Evolving into a stronger and more powerful form mid-fight!", "youtube": false },
      { "filename": "fred1.mp4", "caption": "Custom cutscene meeting your other rival", "youtube": false },
      { "filename": "sicab.mp4", "caption": "Showing a different town and having to fix their power outage", "youtube": false },
      { "filename": "static.mp4", "caption": "Battles against static Pokémon - which occur frequently throughout the game!", "youtube": false }
    ],
    "images": [
      { "filename": "starter_convo.gif", "caption": "Dialogue with the character's Dad" },
      { "filename": "starter.gif", "caption": "Machine for selecting your partner; flags ensure that you can only do this once talking to your Dad" },
      { "filename": "tooltips.gif", "caption": "Holding [Shift] will bring up a tooltip screen where the player can see what each control does, their coordinates, and key strokes" },
      { "filename": "saveload.gif", "caption": "Creating a new save file, saving the game, and it writing the save as a .dat file which can be loaded from with ease" },
      { "filename": "item_pickup.gif", "caption": "Picking up items in the overworld" },
      { "filename": "bag.gif", "caption": "Accessing your bag shows you all of your items sorted in different pockets" },
      { "filename": "bag_move.gif", "caption": "Items can be moved around inside pockets too to the player's liking" },
      { "filename": "use_item.gif", "caption": "Certain items can be used on your partners, each having a different effect/UI" },
      { "filename": "pokedex.gif", "caption": "The player also has an encyclopedia that gets filled out for every new Pokémon you see and catch, seeing information about each species" },
      { "filename": "party.gif", "caption": "The player's party, showing their info and can move the members around" },
      { "filename": "shop.gif", "caption": "There's shops in every town where the player can purchase resources" },
      { "filename": "heal.gif", "caption": "There are also healing stations in every town that the player can use for free" },
      { "filename": "pc.gif", "caption": "Each healing station also has a P.C. that stores extra Pokémon that you can swap with/organize with ease!" },
      { "filename": "4move.gif", "caption": "Sometimes when leveling up Pokémon will learn a new move, and if you have 4 moves already you need to replace one" },
      { "filename": "hm.gif", "caption": "Certain items can teach moves (infinitely) to customize moveset options. Certain ones also do things in the overworld!" },
      { "filename": "dex_nav.gif", "caption": "A key item provided from the start that shows which Pokémon can be found in every area, with Pokémon you haven't caught in grey" },
      { "filename": "dex_nav_full.png", "caption": "Once you've captured everyone, you get a gold star for that area!" },
      { "filename": "calc.gif", "caption": "In-game calculator that contains every trainer, showing how much damage each Pokémon does to each other - doing the math for you!" }
    ],
    "folder": "rpg",
    "category": "Java",
    "date": "Mar 2023 - Present"
  },
  {
    "id": 5,
    "title": "Texas Hold'em Trainer Hackathon",
    "description": "A Java-based poker simulation game developed during a 30-hour hackathon led by me with 3 other groupmates. This trainer programs allows users to play against intelligent NPCs while analyzing game states and outcomes. Each round of Texas Hold'em is handled by a custom engine that models realistic poker behavior, including betting, raising, folding, and hand evaluation. The program uses a **cyclic linked list** to represent players at the table, supporting circular rotation of turns and custom pointer logic:\n\n\n- `dealer`: rotates after each round\n\n- `underGun`: tracks the first player to act in each betting phase\n\n- `active`: tracks whose turn it is during the round\n\nEach action updates the internal structure, and once the betting round completes, the game calculates the best 5-card hand for each remaining player and determines the winner. A launch menu allows players to start new games, load saves, and choose the number of NPC opponents.\n\nConsole text provides real-time breakdowns of hand rankings, decision flow, and internal structure transitions—offering players insights into poker mechanics and the data structures that drive them.\n\n",
    "technologies": [
      { "label": "Java Core", "value": "Used for game logic, structure implementation, and user interaction through `Java Swing` GUI." },
      { "label": "Java Swing GUI", "value": "Built with `JFrame`, `JPanel`, `JButton`, `JLabel`, `JTextArea` + `JScrollPane`, and `JOptionPane` for real-time interaction and visualization." },
      { "label": "Data Structures", "value": "Implements a cyclic linked list to manage player order with rotating pointers: `dealer`, `underGun`, and `active`." },
      { "label": "Hackathon Rapid Prototyping", "value": "Designed and built within 30 hours, emphasizing quick iteration, console feedback, and robust structure-first design." }
    ],
    "github_link": "https://github.com/sjkuhnke/Hackathon",
    "live_link": null,
    "caption": "The gameplay screen with the wallets, bet amounts, active player (yellow), dealer chip, cards and move options all displayed!",
    "videos": [],
    "images": [
      {"filename": "launch.png", "caption": "Launch screen letting you start a new save or load a save (left), selecting how many NPCs to play against (right)"},
      {"filename": "round.gif", "caption": "A standard game round where NPCs are raising, calling and folding with the player based on the game state"},
      {"filename": "straight.gif", "caption": "The player gets a straight, and game figures out (and is printed to the console) the best 5 card hands each player has along with their hand name, and shows who wins!"},
      {"filename": "loop.gif", "caption": "Sped-up gameplay loop showing the winning and the dealer chip being passed around"},
      {"filename": "cyclic-list.png", "caption": "Interior data structure of the players (cyclic linked list), where each node has a \"Player\" pointer and a \"next\" pointer pointing to the next node at the table"},
      {"filename": "cyclic-list1.png", "caption": "After the \"Active\" Player makes a move, the \"Active\" pointer is moved to the node's \"next\" pointer"},
      {"filename": "cyclic-list2.png", "caption": "Simulating the next move being made..."},
      {"filename": "cyclic-list3.png", "caption": "...until the \"Active\" pointer is back at \"Under the Gun\" and the game knows the round of betting is complete!"}
    ],
    "folder": "poker",
    "category": "Java",
    "date": "Sep 23 - Sep 24, 2023"
  },
  {
    "id": 6,
    "title": "TA Scheduler App",
    "description": "A Django-based web application built by a four-person scrum team over the course of a month as part of a Software Engineering class project. The app allows academic administrators to manage instructors, teaching assistants (TAs), courses, and course sections. Developed in two Agile sprints using Trello to organize tasks, the project focused on clean UI design, user account roles, and relationship-driven CRUD operations between instructors, TAs, and course data.\n\n**Key functionality includes:**\n\n- Persistent login sessions with automatic login restoration\n\n- Admin and instructor-specific dashboards based on user role\n\n- Full instructor, TA, course, and section creation/editing/deletion\n\n- Instructor assignment to courses, and TA assignment to course sections\n\n- Relationship management: Deleting a course also removes its sections; deleting an instructor/TA clears assignments\n\nInstructors can only assign TAs to sections of their own courses, enforcing role-based permissions. The project emphasized backend structure, user validation, and relational integrity while supporting real-time user feedback. While the app was not publicly deployed, it is fully functional when run locally and follows Django project conventions and patterns.",
    "technologies": [
      { "label": "Backend", "value": "`Django 4`, `SQLite`, `Django Auth`, `Model Forms`, `Querysets`, `Class-Based Views`" },
      { "label": "Frontend", "value": "`HTML5`, `CSS3`, `Vanilla JavaScript`" },
      { "label": "Team Tools", "value": "`Trello`, `Agile Methodology`, `Sprint Planning`, `Scrum Standups`" },
      { "label": "Other Features", "value": "Role-based dashboards, persistent login sessions, relational model design, foreign key-based assignment logic" }
    ],
    "github_link": null,
    "live_link": null,
    "caption": "The admin home page showing users, courses and TAs in corresponding tables!",
    "videos": [],
    "images": [
      {"filename": "login.png", "caption": "Login screen"},
      {"filename": "home.png", "caption": "Home screen (just the admin account in the system so far)"},
      {"filename": "refresh.gif", "caption": "Refreshing the site saves your login data until you log out!"},
      {"filename": "create.gif", "caption": "Creating an instructor user (all fields are required!)"},
      {"filename": "edit.gif", "caption": "Editing the new user's information"},
      {"filename": "create_course.gif", "caption": "Creating a new course"},
      {"filename": "edit_course.gif", "caption": "Editing the course's info"},
      {"filename": "create_section.gif", "caption": "Creating a new section of our course"},
      {"filename": "edit_section.gif", "caption": "Editing the section's info"},
      {"filename": "delete.gif", "caption": "Deleting the section and then showing that deleting a course deletes all of its' sections along with it"},
      {"filename": "assign_course.gif", "caption": "Can assign an instructor to a course from both the course table and instructor table, as well as the dedicated button"},
      {"filename": "assign_section.gif", "caption": "Creating a new TA account to assign to the sections (since instructors are already assigned to the sections of their courses)"},
      {"filename": "delete_assign.gif", "caption": "Deleting the instructor and TA assignments"},
      {"filename": "instructor.png", "caption": "Home page for instructors when they log in"},
      {"filename": "instructor.gif", "caption": "Instructors can see users in the system, edit their account, view TA's (for assigning), and view courses they're assigned to."},
      {"filename": "assign_ta.gif", "caption": "Instructors can also assign TAs in the system to sections of only classes the instructor user is assigned to!"},
      {"filename": "ta.png", "caption": "Home page for TAs when they log in"},
      {"filename": "ta.gif", "caption": "TAs can see users in the system, edit their account, and view courses/sections they're assigned to!"}
    ],
    "folder": "scheduler",
    "category": "Django",
    "date": "Fall 2023 Semester"
  },
  {
    "id": 7,
    "title": "Binary Search Tree Program",
    "description": "A fully custom Java-based implementation of a Binary Search Tree that fulfills the Java `Set` interface while also providing a live UI and BST visualizer. This project was designed to support a [larger game project](/portfolio/4/), where maintaining and organizing large collections of enum values required an efficient and structured backend solution. The BSTSet program ensures all string-based elements remain sorted, unique, and accessible in logarithmic time.\n\nThe visual interface allows users to insert, remove, and check elements with real-time feedback, offering an educational view into how binary trees operate. It supports in-order traversal for sorted output, full recursive logic for `add`, `remove`, `contains`, and `size`, and shows the structural changes dynamically through animated tree drawing. The UI also supports automatic save/load functionality via `.dat` file serialization, making it possible to resume previous sessions instantly.\n\nKey features include:\n- Full compliance with the Java `Set` interface\n- Recursive methods for all tree operations, preserving balance and uniqueness\n- Real-time visualizer that animates tree growth, removal, and traversal\n- A graphical user interface for input/output\n- Object serialization using Java’s I/O libraries to persist the tree state between runs\n\nThis tool was invaluable for backend enum organization in a custom RPG game and serves as both a practical utility and a learning resource for data structures and recursion.",
    "technologies": [
      { "label": "Java Core Libraries", "value": "Implements `Set` and `Serializable` interfaces to manage collections and persist data." },
      { "label": "Binary Search Tree (BST)", "value": "Supports recursive `add()`, `remove()`, `contains()`, `size()`, and in-order traversal to maintain order and uniqueness." },
      { "label": "Java Swing GUI", "value": "Built with `JFrame`, `JPanel`, `JButton`, `JTextField`, and `JOptionPane` for real-time interaction and visualization." },
      { "label": "Event-Driven Programming", "value": "Uses `ActionListener` for user input and `WindowAdapter` to save data on exit." },
      { "label": "File I/O & Serialization", "value": "Saves and loads tree state with `ObjectOutputStream` and `ObjectInputStream`." },
      { "label": "String Handling", "value": "Case-insensitive logic with utility-based proper casing for display." }
    ],
    "github_link": "https://github.com/sjkuhnke/BSTSetProgram.git",
    "live_link": null,
    "caption": "UML diagram of the program, the GUI in action, and a visual representation of the binary search tree",
    "videos": [],
    "images": [
      {"filename": "gui.gif", "caption": "Letters of the alphabet added in random order, printed in sorted order, and removed"},
      {"filename": "uml.png", "caption": "Full UML class diagram, implementing Java's Set interface"},
      {"filename": "node.png", "caption": "Each Node stores a String and has left/right child references"},
      {"filename": "in_order.png", "caption": "Methods that perform an in-order traversal of the tree to output a sorted list"},
      {"filename": "in_order.gif", "caption": "Letters added in random order, in-order traversal animation of what the recursion is doing"},
      {"filename": "size.png", "caption": "Size methods use recursion to calculate how many elements in the tree"},
      {"filename": "contains.png", "caption": "contains(): used to not allow duplicates (definition of a Set)"},
      {"filename": "contains.gif", "caption": "How the recursive algorithm works for contains()"},
      {"filename": "add.png", "caption": "Recursive insertion logic for adding an element"},
      {"filename": "add.gif", "caption": "Visual animation of letters being added in random order - tree grows dynamically"},
      {"filename": "remove.png", "caption": "remove() covers all 3 removal cases: leaf, node with 1 child, and node with 2 children (predecessor replacement)"},
      {"filename": "remove.gif", "caption": "Showing live deletion of the aforementioned 3 different removal cases - including replacing the root"},
      {"filename": "io.gif", "caption": "Shows automatic saving and loading of the BST object when closing/opening the program"}
    ],
    "folder": "bst",
    "category": "Java",
    "date": "June 2023"
  }
]